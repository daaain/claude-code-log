#!/usr/bin/env python3
"""Test cases for the converter module."""

import json
import tempfile
from pathlib import Path
from claude_code_log.converter import load_transcript, generate_html, is_system_message


def test_caveat_message_filtering():
    """Test that caveat messages are properly filtered out."""
    # Create a test JSONL file with a caveat message
    caveat_message = {
        "type": "user",
        "timestamp": "2025-06-08T03:31:46.490Z",
        "message": {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.",
                }
            ],
        },
    }

    normal_message = {
        "type": "user",
        "timestamp": "2025-06-08T03:32:46.490Z",
        "message": {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "This is a normal user message that should appear in the output.",
                }
            ],
        },
    }

    # Test the is_system_message function directly
    caveat_text = "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
    normal_text = "This is a normal user message that should appear in the output."

    assert is_system_message(caveat_text, caveat_message["message"]), (
        "Caveat message should be detected as system message"
    )
    assert not is_system_message(normal_text, normal_message["message"]), (
        "Normal message should not be detected as system message"
    )

    # Test end-to-end with JSONL processing
    with tempfile.NamedTemporaryFile(mode="w", suffix=".jsonl", delete=False) as f:
        f.write(json.dumps(caveat_message) + "\n")
        f.write(json.dumps(normal_message) + "\n")
        f.flush()

        test_file_path = Path(f.name)

    try:
        # Load the transcript
        messages = load_transcript(test_file_path)
        assert len(messages) == 2, f"Expected 2 messages, got {len(messages)}"

        # Generate HTML
        html = generate_html(messages, "Test Transcript")

        # The HTML should NOT contain the caveat message
        assert "Caveat: The messages below were generated" not in html, (
            "Caveat message should be filtered out of HTML"
        )

        # The HTML should contain the normal message
        assert "This is a normal user message" in html, (
            "Normal message should appear in HTML"
        )

        print("âœ“ Test passed: Caveat messages are properly filtered")

    finally:
        # Clean up
        test_file_path.unlink()


if __name__ == "__main__":
    test_caveat_message_filtering()
